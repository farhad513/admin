import React, { useEffect, useState, useMemo } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import toast from "react-hot-toast";
import { MdLocalHospital } from "react-icons/md";
import {
  GetAmbulance,
  update_ambulance,
  ambulance_image_update,
  messageClear,
} from "../../store/Reducers/ambulanceReducer";
import SeoHelmet from "../components/SEO";

const EditAmbulancePage = () => {
  const dispatch = useDispatch();
  const { ambulanceId } = useParams();

  const { ambulance, successMessage, errorMessage } = useSelector(
    (state) => state.ambulance
  );
  const [formData, setFormData] = useState({
    ambulanceName: "",
    driverName: "",
    driverPhone: "",
    registrationNumber: "",
    type: "AC",
    chargePerKm: "",
    baseCharge: "",
    insuranceExpiry: "",
    joiningDate: "",
    nidNumber: "",
    category: "Hospital Owned",
    oxygenSupport: "Yes",
    emergencyPhone: "",
  });

  const [imageShow, setImageShow] = useState([]);
  const [loading, setLoading] = useState(false);

  const typeOptions = useMemo(
    () => [
      { value: "AC", label: "‡¶è‡¶∏‡¶ø" },
      { value: "Non-AC", label: "‡¶®‡¶®-‡¶è‡¶∏‡¶ø" },
      { value: "ICU", label: "‡¶Ü‡¶á‡¶∏‡¶ø‡¶á‡¶â" },
      { value: "Deadbody Carry", label: "‡¶Æ‡ßÉ‡¶§‡¶¶‡ßá‡¶π ‡¶¨‡¶π‡¶®" },
      { value: "Normal", label: "‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤" },
    ],
    []
  );

  const categoryOptions = useMemo(
    () => [
      { value: "Hospital Owned", label: "‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡¶ß‡ßÄ‡¶®" },
      { value: "Rented", label: "‡¶≠‡¶æ‡ßú‡¶æ‡¶ï‡ßÉ‡¶§" },
      { value: "Private Contract", label: "‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü" },
    ],
    []
  );

  const oxygenSupportOptions = useMemo(
    () => [
      { value: "Yes", label: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å" },
      { value: "No", label: "‡¶®‡¶æ" },
    ],
    []
  );

  useEffect(() => {
    dispatch(GetAmbulance(ambulanceId));
  }, [dispatch, ambulanceId]);

  useEffect(() => {
    if (ambulance) {
      setFormData({
        ambulanceName: ambulance.ambulanceName || "",
        driverName: ambulance.driverName || "",
        driverPhone: ambulance.driverPhone || "",
        registrationNumber: ambulance.registrationNumber || "",
        type: ambulance.type || "",
        chargePerKm: ambulance.chargePerKm || "",
        baseCharge: ambulance.baseCharge || "",
        insuranceExpiry: ambulance.insuranceExpiry?.slice(0, 10) || "",
        joiningDate: ambulance.joiningDate?.slice(0, 10) || "",
        nidNumber: ambulance.nidNumber || "",
        category: ambulance.category || "",
        oxygenSupport: ambulance.oxygenSupport || "",
        emergencyPhone: ambulance.emergencyPhone || "",
      });
      setImageShow(ambulance.image);
    }
  }, [ambulance]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // üî• ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Image Update Function
  const changeImage = (img, files) => {
    if (files.length === 0) {
      toast.error("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
      return;
    }

    const file = files[0];

    // Check file type (only image)
    if (!file.type.startsWith("image/")) {
      toast.error("‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§");
      return;
    }

    // Optional: Check file size (e.g. 2MB max)
    const maxSizeInMB = 2;
    if (file.size / 1024 / 1024 > maxSizeInMB) {
      toast.error(`‡¶á‡¶Æ‡ßá‡¶ú ${maxSizeInMB}MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§`);
      return;
    }

    // dispatch data with validation
    dispatch(
      ambulance_image_update({
        oldPublicId: img.public_id, // ‚úÖ must use public_id here
        newImage: file,
        ambulanceId: ambulanceId,
      })
    );
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setLoading(true);
    dispatch(
      update_ambulance({
        ...formData,
        ambulanceId,
      })
    );
  };

  useEffect(() => {
    if (errorMessage) {
      toast.error(errorMessage);
      dispatch(messageClear());
      setLoading(false);
    }
    if (successMessage) {
      toast.success(successMessage);
      dispatch(messageClear());
      setLoading(false);
    }
  }, [successMessage, errorMessage, dispatch]);

  return (
    <div className="max-w-5xl mx-auto py-10">
      <SeoHelmet
  title="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® | Medi Fast Health Care ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®"
  description="Medi Fast Health Care ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞, ‡¶ß‡¶∞‡¶®, ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ì ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
  keywords="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶°‡¶ø‡¶ü, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü, Medi Fast Health Care, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°"
/>

      <div className="bg-gradient-to-r from-green-600 to-green-400 text-white rounded-xl p-8 text-center shadow-lg mb-10">
        <h1 className="text-4xl font-extrabold mb-2">
          üöë ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        </h1>
      </div>

      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-xl shadow-lg p-8 space-y-6"
      >
        <FormGroup
          label="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
          name="ambulanceName"
          value={formData.ambulanceName}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
          name="driverName"
          value={formData.driverName}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶´‡ßã‡¶®"
          name="driverPhone"
          value={formData.driverPhone}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
          name="registrationNumber"
          value={formData.registrationNumber}
          onChange={handleChange}
        />
        <SelectGroup
          label="‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®"
          name="type"
          value={formData.type}
          onChange={handleChange}
          options={typeOptions}
        />
        <FormGroup
          label="‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ï‡¶ø‡¶≤‡ßã‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞‡ßá ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú"
          name="chargePerKm"
          value={formData.chargePerKm}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶¨‡ßá‡¶∏ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú"
          name="baseCharge"
          value={formData.baseCharge}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶á‡¶®‡ßç‡¶∏‡ßÅ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶"
          name="insuranceExpiry"
          value={formData.insuranceExpiry}
          onChange={handleChange}
          type="date"
        />
        <FormGroup
          label="‡¶ú‡ßü‡ßá‡¶®‡¶ø‡¶Ç ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ"
          name="joiningDate"
          value={formData.joiningDate}
          onChange={handleChange}
          type="date"
        />
        <FormGroup
          label="‡¶™‡¶∞‡¶ø‡¶ö‡ßü‡¶™‡¶§‡ßç‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
          name="nidNumber"
          value={formData.nidNumber}
          onChange={handleChange}
        />
        <FormGroup
          label="‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶´‡ßã‡¶®"
          name="emergencyPhone"
          value={formData.emergencyPhone}
          onChange={handleChange}
        />
        <SelectGroup
          label="‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø"
          name="category"
          value={formData.category}
          onChange={handleChange}
          options={categoryOptions}
        />
        <SelectGroup
          label="‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü"
          name="oxygenSupport"
          value={formData.oxygenSupport}
          onChange={handleChange}
          options={oxygenSupportOptions}
        />

        {/* Image Upload */}
        <div className="grid lg:grid-cols-4 grid-cols-1 gap-3 w-full text-[#d0d2d6] mb-4">
          {imageShow && imageShow.url && (
            <div>
              <label className="h-[180px]" htmlFor="doctor-image">
                <img
                  className="h-full w-full object-cover"
                  src={imageShow.url}
                  alt=""
                />
              </label>
              <input
                onChange={(e) => changeImage(imageShow, e.target.files)}
                type="file"
                id="doctor-image"
                className="hidden"
              />
            </div>
          )}
        </div>

        <button
          type="submit"
          disabled={loading}
          className={`w-full flex items-center justify-center gap-2 text-white text-lg font-semibold py-3 rounded-lg ${
            loading
              ? "bg-green-400 cursor-not-allowed"
              : "bg-green-600 hover:bg-green-700"
          }`}
        >
          <MdLocalHospital size={22} />
          {loading ? "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"}
        </button>
      </form>
    </div>
  );
};

const FormGroup = ({ label, name, value, onChange, type = "text" }) => (
  <div>
    <label className="block text-lg font-bold text-gray-700 mb-2">
      {label}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      className="w-full border border-green-300 rounded-lg p-3 focus:ring-2 focus:ring-green-400"
    />
  </div>
);

const SelectGroup = ({ label, name, value, onChange, options }) => (
  <div>
    <label className="block text-lg font-bold text-gray-700 mb-2">
      {label}
    </label>
    <select
      name={name}
      value={value}
      onChange={onChange}
      className="w-full border border-green-300 rounded-lg p-3 focus:ring-2 focus:ring-green-400"
    >
      {options.map((opt) => (
        <option key={opt.value} value={opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
  </div>
);

export default EditAmbulancePage;
