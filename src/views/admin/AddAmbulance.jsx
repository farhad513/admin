import React, { useEffect, useState, useCallback, useMemo } from "react";
import { useDispatch, useSelector } from "react-redux";
import toast from "react-hot-toast";
import { MdLocalHospital } from "react-icons/md";
import {
  AmbulanceAdd,
  messageClear,
} from "../../store/Reducers/ambulanceReducer";
import { BsImages } from "react-icons/bs";
import { IoCloseSharp } from "react-icons/io5";
import SeoHelmet from "../components/SEO";

const initialState = {
  ambulanceName: "",
  driverName: "",
  driverPhone: "",
  registrationNumber: "",
  type: "AC",
  chargePerKm: "",
  baseCharge: "",
  insuranceExpiry: "",
  joiningDate: "",
  nidNumber: "",
  category: "Hospital Owned",
  oxygenSupport: "Yes",
  emergencyPhone: "",
};

const AddAmbulancePage = () => {
  const dispatch = useDispatch();
  const [image, setImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const { successMessage, errorMessage } = useSelector(
    (state) => state.ambulance
  );
  const [formData, setFormData] = useState(initialState);
  const [photo, setPhoto] = useState(null);
  const [loading, setLoading] = useState(false);

  // Memoize options for select fields to prevent unnecessary recalculations
  const typeOptions = useMemo(
    () => [
      { value: "AC", label: "‡¶è‡¶∏‡¶ø" },
      { value: "Non-AC", label: "‡¶®‡¶®-‡¶è‡¶∏‡¶ø" },
      { value: "ICU", label: "‡¶Ü‡¶á‡¶∏‡¶ø‡¶á‡¶â" },
      { value: "Deadbody Carry", label: "‡¶Æ‡ßÉ‡¶§‡¶¶‡ßá‡¶π ‡¶¨‡¶π‡¶®" },
      { value: "Normal", label: "‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤" },
    ],
    []
  );

  const categoryOptions = useMemo(
    () => [
      { value: "Hospital Owned", label: "‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡¶ß‡ßÄ‡¶®" },
      { value: "Rented", label: "‡¶≠‡¶æ‡ßú‡¶æ‡¶ï‡ßÉ‡¶§" },
      { value: "Private Contract", label: "‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü" },
    ],
    []
  );

  const oxygenSupportOptions = useMemo(
    () => [
      { value: "Yes", label: "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å" },
      { value: "No", label: "‡¶®‡¶æ" },
    ],
    []
  );

  const handleChange = useCallback((e) => {
    const { name, value } = e.target;

    const banglaOnlyFields = [
      "ambulanceName",
      "driverName",
      "registrationNumber",
      "nidNumber",
      "emergencyPhone",
    ];

    const banglaNumberOnlyFields = ["chargePerKm", "baseCharge"];

    const englishCharRegex = /[a-zA-Z]/;
    const englishNumberRegex = /[0-9]/;
    const nonBanglaNumberRegex = /[^‡ß¶-‡ßØ]/;

    // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    if (banglaOnlyFields.includes(name)) {
      if (englishCharRegex.test(value) || englishNumberRegex.test(value)) {
        toast.error("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§");
        return;
      }
    }

    // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    if (banglaNumberOnlyFields.includes(name)) {
      if (nonBanglaNumberRegex.test(value)) {
        toast.error("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§");
        return;
      }
    }

    if (["driverPhone", "emergencyPhone"].includes(name)) {
      if (nonBanglaNumberRegex.test(value)) {
        toast.error("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§");
        return;
      }

      if (value.length >= 2) {
        if (!value.startsWith("‡ß¶‡ßß")) {
          toast.error("‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡ß¶‡ßß ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
          return;
        }
      }
    }

    setFormData((prev) => ({ ...prev, [name]: value }));
  }, []);

  const imageHandle = useCallback((e) => {
    const file = e.target.files[0];

    if (file) {
      const validTypes = ["image/jpeg", "image/png", "image/webp", "image/jpg"];
      const maxSize = 2 * 1024 * 1024; // 2MB

      if (!validTypes.includes(file.type)) {
        toast.error(
          "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JPG, JPEG, PNG ‡¶Ö‡¶•‡¶¨‡¶æ WEBP ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        );
        return;
      }

      if (file.size > maxSize) {
        toast.error("‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡ß®MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ‡•§");
        return;
      }

      // Optional: convert to webp or resize
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          const maxWidth = 600; // desired max width
          const scaleSize = maxWidth / img.width;
          canvas.width = maxWidth;
          canvas.height = img.height * scaleSize;
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

          canvas.toBlob(
            (blob) => {
              setImage(blob);
              setImagePreview(URL.createObjectURL(blob));
            },
            "image/webp",
            0.8 // quality (optional)
          );
        };
        img.src = event.target.result;
      };
      reader.readAsDataURL(file);
    }
  }, []);

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault();
      if (!image) {
        toast.error("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        return; // ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
      }
      const data = new FormData();

      Object.entries(formData).forEach(([key, value]) => {
        data.append(key, value);
      });
      if (image) data.append("image", image);

      setLoading(true);
      dispatch(AmbulanceAdd(data));
      console.log(data);
    },
    [dispatch, formData, image]
  );

  useEffect(() => {
    if (errorMessage) {
      toast.error(errorMessage);
      dispatch(messageClear());
      setLoading(false);
    }
    if (successMessage) {
      toast.success(successMessage);
      setFormData(initialState);
      setImagePreview(null);
      setImage(null);
      dispatch(messageClear());
      setLoading(false);
    }
  }, [successMessage, errorMessage, dispatch]);

  return (
    <div className="max-w-5xl mx-auto py-10">
      <SeoHelmet
        title="‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® | Medi Fast Health Care ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®"
        description="Medi Fast Health Care ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ, ‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞, ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞, ‡¶ß‡¶∞‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        keywords="‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü, Medi Fast Health Care, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°"
      />

      {/* Banner */}
      <div className="bg-gradient-to-r from-green-600 to-green-400 text-white rounded-xl p-8 text-center shadow-lg mb-10">
        <h1 className="text-4xl font-extrabold mb-2">
          üöë ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        </h1>
        <p className="text-lg font-medium">
          ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ì ‡¶∏‡¶π‡¶ú‡ßá!
        </p>
      </div>

      {/* Form */}
      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-xl shadow-lg p-8 space-y-6"
      >
        {/** Form Groups */}
        <FormGroup
          label="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
          name="ambulanceName"
          value={formData.ambulanceName}
          onChange={handleChange}
          placeholder="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
          required
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormGroup
            label="‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
            name="driverName"
            value={formData.driverName}
            onChange={handleChange}
            placeholder="‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
            required
          />
          <FormGroup
            label="‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶´‡ßã‡¶®"
            name="driverPhone"
            value={formData.driverPhone}
            onChange={handleChange}
            placeholder="‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            required
            maxLength={11}
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormGroup
            label="‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            name="registrationNumber"
            value={formData.registrationNumber}
            onChange={handleChange}
            placeholder="‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            required
          />
          <SelectGroup
            label="‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®"
            name="type"
            value={formData.type}
            onChange={handleChange}
            options={typeOptions}
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormGroup
            label="‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ï‡¶ø‡¶≤‡ßã‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞‡ßá ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú"
            name="chargePerKm"
            value={formData.chargePerKm}
            onChange={handleChange}
            placeholder="‡¶ö‡¶æ‡¶∞‡ßç‡¶ú (‡ß≥)"
            type="text"
            required
          />
          <FormGroup
            label="‡¶¨‡ßá‡¶∏ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú"
            name="baseCharge"
            value={formData.baseCharge}
            onChange={handleChange}
            placeholder="‡¶¨‡ßá‡¶∏ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú (‡ß≥)"
            type="text"
            required
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormGroup
            label="‡¶á‡¶®‡ßç‡¶∏‡ßÅ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶"
            name="insuranceExpiry"
            value={formData.insuranceExpiry}
            onChange={handleChange}
            type="date"
            required
          />
          <FormGroup
            label="‡¶ú‡ßü‡ßá‡¶®‡¶ø‡¶Ç ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ"
            name="joiningDate"
            value={formData.joiningDate}
            onChange={handleChange}
            type="date"
            required
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormGroup
            label="‡¶™‡¶∞‡¶ø‡¶ö‡ßü‡¶™‡¶§‡ßç‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            name="nidNumber"
            value={formData.nidNumber}
            onChange={handleChange}
            placeholder="‡¶™‡¶∞‡¶ø‡¶ö‡ßü‡¶™‡¶§‡ßç‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            required
          />
          <FormGroup
            label="‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            name="emergencyPhone"
            value={formData.emergencyPhone}
            onChange={handleChange}
            placeholder="‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞"
            required
            maxLength={11}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <SelectGroup
            label="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø"
            name="category"
            value={formData.category}
            onChange={handleChange}
            options={categoryOptions}
          />
          <SelectGroup
            label="‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá?"
            name="oxygenSupport"
            value={formData.oxygenSupport}
            onChange={handleChange}
            options={oxygenSupportOptions}
          />
        </div>
        <div className="mb-5">
          <label htmlFor="image" className="mb-4">
            ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
          </label>
          <div className="relative mb-4">
            <input
              type="file"
              id="image"
              name="image"
              onChange={imageHandle}
              accept="image/*"
              className="hidden"
            />
            <div className="border border-dashed p-4 rounded-md">
              {imagePreview ? (
                <div className="relative">
                  <img
                    src={imagePreview}
                    alt="preview"
                    className="w-full h-full object-cover rounded-md"
                  />
                  <button
                    type="button"
                    onClick={() => {
                      setImage(null);
                      setImagePreview(null);
                    }}
                    className="absolute top-0 right-0 p-2 bg-red-600 text-white rounded-full"
                  >
                    <IoCloseSharp />
                  </button>
                </div>
              ) : (
                <label htmlFor="image" className="cursor-pointer ">
                  <BsImages size={40} />
                  <p>‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                </label>
              )}
            </div>
          </div>
        </div>
        <button
          type="submit"
          disabled={loading}
          className={`w-full flex items-center justify-center gap-2 text-white text-lg font-semibold py-3 rounded-lg transition duration-200 ${
            loading
              ? "bg-green-400 cursor-not-allowed"
              : "bg-green-600 hover:bg-green-700"
          }`}
        >
          <MdLocalHospital size={22} />
          {loading ? "‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"}
        </button>
      </form>
    </div>
  );
};

const FormGroup = ({
  label,
  name,
  value,
  onChange,
  type = "text",
  placeholder,
  required = false,
  maxLength,
}) => (
  <div>
    <label className="block text-lg font-bold text-gray-700 mb-2">
      {label}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      required={required}
      maxLength={maxLength}
      className="w-full border border-green-300 rounded-lg p-3 focus:ring-2 focus:ring-green-400"
    />
  </div>
);

const SelectGroup = ({ label, name, value, onChange, options }) => (
  <div>
    <label className="block text-lg font-bold text-gray-700 mb-2">
      {label}
    </label>
    <select
      name={name}
      value={value}
      onChange={onChange}
      className="w-full border border-green-300 rounded-lg p-3 focus:ring-2 focus:ring-green-400"
    >
      {options.map((opt) => (
        <option key={opt.value} value={opt.value}>
          {opt.label}
        </option>
      ))}
    </select>
  </div>
);

export default AddAmbulancePage;
